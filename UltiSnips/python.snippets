snippet ### "Creates a box for storing comments" b
`!p
snip.rv="#"*min(len(t[1])+2, 80)
snip.rv+="\n#"
`${1:Description}`!p
snip.rv="#"

snip.rv+="\n"
snip.rv+="#"*min(len(t[1])+2, 80)
`
endsnippet

snippet addParser "Adds all the squeleton for argument parsing" b
import argparse
parser = argparse.ArgumentParser(description='${1:description}')

${2:####################
#Put you parser arguments here
#parser.add_argument('-d', '--directory', 
#                    help="Directory to parse for pdfs",
#                    type=str, default= "./")
#You can also use the addArg snippet.
####################}

args = parser.parse_args()

####################
#Extract your variables here
# directory=args.directory
####################

endsnippet

snippet addArg "Adds a new argument to the arg parser" b
parser.add_argument('-${1/^(.).*/$1/}', '--${1:filename}', 
                    help="${2:Simple help}",
                    type=${3:str}, default= ${4:None})
$1=args.$1
endsnippet

snippet storeTrue "Adds a store_true parser argumant" b
parser.add_argument('-${1/^(.).*/$1/}', '--${1:save}', 
                    action='store_true',
                    help="${2:Saves the file}",
                    default= ${4:False})
$1=args.$1
endsnippet

snippet witho "Inserts code to read a file properly" b
with open("${1:filename}", 'r') as myfile:
    ${2:data}=myfile.read()
endsnippet

snippet funcApplyToFile "Adds a function that applies the function given as first argument to every line of a file whose path is given as the second argument, and saves the output to the file given as tird argument." b
def applyToFile(functionToApply, oldfile, newfile):
    with open(newfile, 'w') as outfile, open(oldfile, 'r', encoding='utf-8') as infile:
        for line in infile:
            o_line=functionToApply(line)
            outfile.write(line)
endsnippet

snippet jsave "Serialises some data to a json file" b
with open("${1:filename}.json", "w") as outputFile:
    outputFile.write(json.dumps(${2:dictionary}, ensure_ascii=False))
endsnippet

snippet ipprint "Code that imports prettyprint and sets the pp function." b
import pprint

pprinter = pprint.PrettyPrinter(indent=2)
pp=pprinter.pprint
endsnippet
